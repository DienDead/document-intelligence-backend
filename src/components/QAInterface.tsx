"use client"

import type React from "react"
import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { apiClient, type QAResponse } from "@/lib/api-client"
import { Send, AlertCircle, Loader2 } from "lucide-react"
import { Badge } from "@/components/ui/badge"

interface QAInterfaceProps {
  documentId: string
  documentTitle: string
}

export default function QAInterface({ documentId, documentTitle }: QAInterfaceProps) {
  const [question, setQuestion] = useState("")
  const [answer, setAnswer] = useState<QAResponse | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!question.trim()) return

    try {
      setLoading(true)
      setError(null)
      const response = await apiClient.askQuestion(documentId, question)
      setAnswer(response)
    } catch (err) {
      console.error("Error asking question:", err)
      setError("Failed to get answer. Using mock response instead.")

      // Fallback to mock response
      setAnswer({
        answer:
          "This is a mock answer since the API request failed. In a real environment, this would be generated by the AI based on the document content.",
        sources: [
          {
            chunk_index: 0,
            content:
              "This is a mock source chunk. In a real environment, this would be actual content from the document.",
            page_number: 1,
          },
        ],
        document_title: documentTitle,
      } as QAResponse)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Ask Questions</CardTitle>
          <CardDescription>
            Ask questions about <span className="font-medium">{documentTitle}</span> and get AI-powered answers
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <Textarea
              placeholder="Ask a question about this document..."
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              className="min-h-[100px]"
            />
            <Button type="submit" disabled={loading || !question.trim()}>
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Thinking...
                </>
              ) : (
                <>
                  <Send className="h-4 w-4 mr-2" />
                  Ask Question
                </>
              )}
            </Button>
          </form>
        </CardContent>
      </Card>

      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {answer && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Answer</CardTitle>
              <div className="flex items-center space-x-2 text-sm text-gray-500">
                {answer.ai_response && <Badge variant="outline">{answer.ai_response.model.split("/").pop()}</Badge>}
                {answer.processing_time && <span>{(answer.processing_time / 1000).toFixed(1)}s</span>}
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="bg-gray-50 p-4 rounded-md">{answer.answer}</div>

            {answer.sources && answer.sources.length > 0 && (
              <div>
                <h3 className="text-sm font-medium mb-2">Sources:</h3>
                <div className="space-y-2">
                  {answer.sources.map((source, index) => (
                    <div key={index} className="text-sm border-l-2 border-gray-300 pl-3">
                      <div className="text-xs text-gray-500">
                        Page {source.page_number}, Chunk {source.chunk_index + 1}
                      </div>
                      <div className="text-gray-700">{source.content}</div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {answer.ai_response?.usage && (
              <div className="text-xs text-gray-500 border-t pt-2">
                <div className="flex justify-between">
                  <span>Tokens used:</span>
                  <span>{answer.ai_response.usage.total_tokens}</span>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  )
}
